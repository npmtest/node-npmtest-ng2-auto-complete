{"/home/travis/build/npmtest/node-npmtest-ng2-auto-complete/test.js":"/* istanbul instrument in package npmtest_ng2_auto_complete */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-auto-complete/lib.npmtest_ng2_auto_complete.js":"/* istanbul instrument in package npmtest_ng2_auto_complete */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ng2_auto_complete = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ng2_auto_complete = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-auto-complete/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ng2-auto-complete && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ng2_auto_complete */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ng2_auto_complete\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ng2_auto_complete.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ng2_auto_complete.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ng2_auto_complete.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ng2_auto_complete.__dirname + '/lib.npmtest_ng2_auto_complete.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-auto-complete/node_modules/ng2-auto-complete/dist/ng2-auto-complete.umd.js":"(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"@angular/forms\"), require(\"@angular/common\"), require(\"@angular/http\"), require(\"rxjs/add/operator/map\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"@angular/forms\", \"@angular/common\", \"@angular/http\", \"rxjs/add/operator/map\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng2-auto-complete\"] = factory(require(\"@angular/core\"), require(\"@angular/forms\"), require(\"@angular/common\"), require(\"@angular/http\"), require(\"rxjs/add/operator/map\"));\n\telse\n\t\troot[\"ng2-auto-complete\"] = factory(root[\"@angular/core\"], root[\"@angular/forms\"], root[\"@angular/common\"], root[\"@angular/http\"], root[\"rxjs/add/operator/map\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 9);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = __webpack_require__(0);\nvar ng2_auto_complete_1 = __webpack_require__(2);\n/**\n * show a selected date in monthly calendar\n * Each filteredList item has the following property in addition to data itself\n *   1. displayValue as string e.g. Allen Kim\n *   2. dataValue as any e.g.\n */\nvar Ng2AutoCompleteComponent = (function () {\n    /**\n     * constructor\n     */\n    function Ng2AutoCompleteComponent(elementRef, autoComplete) {\n        var _this = this;\n        this.autoComplete = autoComplete;\n        this.minChars = 0;\n        this.loadingText = \"Loading\";\n        this.showInputTag = true;\n        this.showDropdownOnInit = false;\n        this.tabToSelect = true;\n        this.matchFormatted = false;\n        this.valueSelected = new core_1.EventEmitter();\n        this.dropdownVisible = false;\n        this.isLoading = false;\n        this.filteredList = [];\n        this.minCharsEntered = false;\n        this.itemIndex = 0;\n        this.reloadListInDelay = function (evt) {\n            var delayMs = _this.isSrcArr() ? 10 : 500;\n            var keyword = evt.target.value;\n            // executing after user stopped typing\n            _this.delay(function () { return _this.reloadList(keyword); }, delayMs);\n        };\n        this.inputElKeyHandler = function (evt) {\n            var totalNumItem = _this.filteredList.length;\n            switch (evt.keyCode) {\n                case 27:\n                    break;\n                case 38:\n                    _this.itemIndex = (totalNumItem + _this.itemIndex - 1) % totalNumItem;\n                    break;\n                case 40:\n                    _this.dropdownVisible = true;\n                    _this.itemIndex = (totalNumItem + _this.itemIndex + 1) % totalNumItem;\n                    break;\n                case 13:\n                    if (_this.filteredList.length > 0) {\n                        _this.selectOne(_this.filteredList[_this.itemIndex]);\n                    }\n                    evt.preventDefault();\n                    break;\n                case 9:\n                    if (_this.tabToSelect && _this.filteredList.length > 0) {\n                        _this.selectOne(_this.filteredList[_this.itemIndex]);\n                    }\n                    break;\n            }\n        };\n        this.delay = (function () {\n            var timer = 0;\n            return function (callback, ms) {\n                clearTimeout(timer);\n                timer = setTimeout(callback, ms);\n            };\n        })();\n        this.el = elementRef.nativeElement;\n    }\n    Ng2AutoCompleteComponent.prototype.isSrcArr = function () {\n        return (this.source.constructor.name === \"Array\");\n    };\n    /**\n     * user enters into input el, shows list to select, then select one\n     */\n    Ng2AutoCompleteComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.autoComplete.source = this.source;\n        this.autoComplete.pathToData = this.pathToData;\n        this.autoComplete.listFormatter = this.listFormatter;\n        setTimeout(function () {\n            if (_this.autoCompleteInput) {\n                _this.autoCompleteInput.nativeElement.focus();\n            }\n            if (_this.showDropdownOnInit) {\n                _this.showDropdownList({ target: { value: '' } });\n            }\n        });\n    };\n    Ng2AutoCompleteComponent.prototype.showDropdownList = function (event) {\n        this.dropdownVisible = true;\n        this.reloadList(event.target.value);\n    };\n    Ng2AutoCompleteComponent.prototype.hideDropdownList = function () {\n        this.dropdownVisible = false;\n    };\n    Ng2AutoCompleteComponent.prototype.findItemFromSelectValue = function (selectText) {\n        var matchingItems = this.filteredList\n            .filter(function (item) { return ('' + item) === selectText; });\n        return matchingItems.length ? matchingItems[0] : null;\n    };\n    Ng2AutoCompleteComponent.prototype.reloadList = function (keyword) {\n        var _this = this;\n        this.filteredList = [];\n        if (keyword.length < (this.minChars || 0)) {\n            this.minCharsEntered = false;\n            return;\n        }\n        else {\n            this.minCharsEntered = true;\n        }\n        if (this.isSrcArr()) {\n            this.isLoading = false;\n            this.filteredList = this.autoComplete.filter(this.source, keyword, this.matchFormatted);\n            if (this.maxNumList) {\n                this.filteredList = this.filteredList.slice(0, this.maxNumList);\n            }\n        }\n        else {\n            this.isLoading = true;\n            if (typeof this.source === \"function\") {\n                // custom function that returns observable\n                this.source(keyword).subscribe(function (resp) {\n                    if (_this.pathToData) {\n                        var paths = _this.pathToData.split(\".\");\n                        paths.forEach(function (prop) { return resp = resp[prop]; });\n                    }\n                    _this.filteredList = resp;\n                    if (_this.maxNumList) {\n                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);\n                    }\n                }, function (error) { return null; }, function () { return _this.isLoading = false; } // complete\n                );\n            }\n            else {\n                // remote source\n                this.autoComplete.getRemoteData(keyword).subscribe(function (resp) {\n                    _this.filteredList = resp;\n                    if (_this.maxNumList) {\n                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);\n                    }\n                }, function (error) { return null; }, function () { return _this.isLoading = false; } // complete\n                );\n            }\n        }\n    };\n    Ng2AutoCompleteComponent.prototype.selectOne = function (data) {\n        this.valueSelected.emit(data);\n    };\n    ;\n    Object.defineProperty(Ng2AutoCompleteComponent.prototype, \"emptyList\", {\n        get: function () {\n            return !(this.isLoading ||\n                (this.minCharsEntered && !this.isLoading && !this.filteredList.length) ||\n                (this.filteredList.length));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Input(\"list-formatter\"), \n        __metadata('design:type', Function)\n    ], Ng2AutoCompleteComponent.prototype, \"listFormatter\", void 0);\n    __decorate([\n        core_1.Input(\"source\"), \n        __metadata('design:type', Object)\n    ], Ng2AutoCompleteComponent.prototype, \"source\", void 0);\n    __decorate([\n        core_1.Input(\"path-to-data\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteComponent.prototype, \"pathToData\", void 0);\n    __decorate([\n        core_1.Input(\"min-chars\"), \n        __metadata('design:type', Number)\n    ], Ng2AutoCompleteComponent.prototype, \"minChars\", void 0);\n    __decorate([\n        core_1.Input(\"placeholder\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteComponent.prototype, \"placeholder\", void 0);\n    __decorate([\n        core_1.Input(\"blank-option-text\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteComponent.prototype, \"blankOptionText\", void 0);\n    __decorate([\n        core_1.Input(\"no-match-found-text\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteComponent.prototype, \"noMatchFoundText\", void 0);\n    __decorate([\n        core_1.Input(\"accept-user-input\"), \n        __metadata('design:type', Boolean)\n    ], Ng2AutoCompleteComponent.prototype, \"acceptUserInput\", void 0);\n    __decorate([\n        core_1.Input(\"loading-text\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteComponent.prototype, \"loadingText\", void 0);\n    __decorate([\n        core_1.Input(\"max-num-list\"), \n        __metadata('design:type', Number)\n    ], Ng2AutoCompleteComponent.prototype, \"maxNumList\", void 0);\n    __decorate([\n        core_1.Input(\"show-input-tag\"), \n        __metadata('design:type', Boolean)\n    ], Ng2AutoCompleteComponent.prototype, \"showInputTag\", void 0);\n    __decorate([\n        core_1.Input(\"show-dropdown-on-init\"), \n        __metadata('design:type', Boolean)\n    ], Ng2AutoCompleteComponent.prototype, \"showDropdownOnInit\", void 0);\n    __decorate([\n        core_1.Input(\"tab-to-select\"), \n        __metadata('design:type', Boolean)\n    ], Ng2AutoCompleteComponent.prototype, \"tabToSelect\", void 0);\n    __decorate([\n        core_1.Input(\"match-formatted\"), \n        __metadata('design:type', Boolean)\n    ], Ng2AutoCompleteComponent.prototype, \"matchFormatted\", void 0);\n    __decorate([\n        core_1.Output(), \n        __metadata('design:type', Object)\n    ], Ng2AutoCompleteComponent.prototype, \"valueSelected\", void 0);\n    __decorate([\n        core_1.ViewChild('autoCompleteInput'), \n        __metadata('design:type', core_1.ElementRef)\n    ], Ng2AutoCompleteComponent.prototype, \"autoCompleteInput\", void 0);\n    Ng2AutoCompleteComponent = __decorate([\n        core_1.Component({\n            selector: \"ng2-auto-complete\",\n            template: \"\\n  <div class=\\\"ng2-auto-complete\\\">\\n\\n    <!-- keyword input -->\\n    <input *ngIf=\\\"showInputTag\\\"\\n           #autoCompleteInput class=\\\"keyword\\\"\\n           placeholder=\\\"{{placeholder}}\\\"\\n           (focus)=\\\"showDropdownList($event)\\\"\\n           (blur)=\\\"hideDropdownList()\\\"\\n           (keydown)=\\\"inputElKeyHandler($event)\\\"\\n           (input)=\\\"reloadListInDelay($event)\\\"\\n           [(ngModel)]=\\\"keyword\\\" />\\n\\n    <!-- dropdown that user can select -->\\n    <ul *ngIf=\\\"dropdownVisible\\\" [class.empty]=\\\"emptyList\\\">\\n      <li *ngIf=\\\"isLoading\\\" class=\\\"loading\\\">{{loadingText}}</li>\\n      <li *ngIf=\\\"minCharsEntered && !isLoading && !filteredList.length\\\"\\n           (mousedown)=\\\"selectOne('')\\\"\\n           class=\\\"no-match-found\\\">{{noMatchFoundText || 'No Result Found'}}</li>\\n      <li *ngIf=\\\"blankOptionText && filteredList.length\\\"\\n          (mousedown)=\\\"selectOne('')\\\"\\n          class=\\\"blank-item\\\">{{blankOptionText}}</li>\\n      <li class=\\\"item\\\"\\n          *ngFor=\\\"let item of filteredList; let i=index\\\"\\n          (mousedown)=\\\"selectOne(item)\\\"\\n          [ngClass]=\\\"{selected: i === itemIndex}\\\"\\n          [innerHtml]=\\\"autoComplete.getFormattedListItem(item)\\\">\\n      </li>\\n    </ul>\\n\\n  </div>\",\n            providers: [ng2_auto_complete_1.Ng2AutoComplete],\n            styles: [\"\\n  @keyframes slideDown {\\n    0% {\\n      transform:  translateY(-10px);\\n    }\\n    100% {\\n      transform: translateY(0px);\\n    }\\n  }\\n  .ng2-auto-complete {\\n    background-color: transparent;\\n  }\\n  .ng2-auto-complete > input {\\n    outline: none;\\n    border: 0;\\n    padding: 2px; \\n    box-sizing: border-box;\\n    background-clip: content-box;\\n  }\\n\\n  .ng2-auto-complete > ul {\\n    background-color: #fff;\\n    margin: 0;\\n    width : 100%;\\n    overflow-y: auto;\\n    list-style-type: none;\\n    padding: 0;\\n    border: 1px solid #ccc;\\n    box-sizing: border-box;\\n    animation: slideDown 0.1s;\\n  }\\n  .ng2-auto-complete > ul.empty {\\n    display: none;\\n  }\\n\\n  .ng2-auto-complete > ul li {\\n    padding: 2px 5px;\\n    border-bottom: 1px solid #eee;\\n  }\\n\\n  .ng2-auto-complete > ul li.selected {\\n    background-color: #ccc;\\n  }\\n\\n  .ng2-auto-complete > ul li:last-child {\\n    border-bottom: none;\\n  }\\n\\n  .ng2-auto-complete > ul li:hover {\\n    background-color: #ccc;\\n  }\"\n            ],\n            encapsulation: core_1.ViewEncapsulation.None\n        }), \n        __metadata('design:paramtypes', [core_1.ElementRef, ng2_auto_complete_1.Ng2AutoComplete])\n    ], Ng2AutoCompleteComponent);\n    return Ng2AutoCompleteComponent;\n}());\nexports.Ng2AutoCompleteComponent = Ng2AutoCompleteComponent;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar core_1 = __webpack_require__(0);\nvar http_1 = __webpack_require__(7);\n__webpack_require__(8);\n/**\n * provides auto-complete related utility functions\n */\nvar Ng2AutoComplete = (function () {\n    function Ng2AutoComplete(http) {\n        this.http = http;\n        // ...\n    }\n    Ng2AutoComplete.prototype.filter = function (list, keyword, matchFormatted) {\n        var _this = this;\n        return list.filter(function (el) {\n            var objStr = matchFormatted ? _this.getFormattedListItem(el).toLowerCase() : JSON.stringify(el).toLowerCase();\n            keyword = keyword.toLowerCase();\n            //console.log(objStr, keyword, objStr.indexOf(keyword) !== -1);\n            return objStr.indexOf(keyword) !== -1;\n        });\n    };\n    Ng2AutoComplete.prototype.getFormattedListItem = function (data) {\n        var formatted;\n        var formatter = this.listFormatter || '(id) value';\n        if (typeof formatter === 'function') {\n            formatted = formatter.apply(this, [data]);\n        }\n        else if (typeof data !== 'object') {\n            formatted = data;\n        }\n        else if (typeof formatter === 'string') {\n            formatted = formatter;\n            var matches = formatter.match(/[a-zA-Z0-9_\\$]+/g);\n            if (matches && typeof data !== 'string') {\n                matches.forEach(function (key) {\n                    formatted = formatted.replace(key, data[key]);\n                });\n            }\n        }\n        return formatted;\n    };\n    /**\n     * return remote data from the given source and options, and data path\n     */\n    Ng2AutoComplete.prototype.getRemoteData = function (keyword) {\n        var _this = this;\n        if (typeof this.source !== 'string') {\n            throw \"Invalid type of source, must be a string. e.g. http://www.google.com?q=:my_keyword\";\n        }\n        else if (!this.http) {\n            throw \"Http is required.\";\n        }\n        var matches = this.source.match(/:[a-zA-Z_]+/);\n        if (matches === null) {\n            throw \"Replacement word is missing.\";\n        }\n        var replacementWord = matches[0];\n        var url = this.source.replace(replacementWord, keyword);\n        return this.http.get(url)\n            .map(function (resp) { return resp.json(); })\n            .map(function (resp) {\n            var list = resp.data || resp;\n            if (_this.pathToData) {\n                var paths = _this.pathToData.split(\".\");\n                paths.forEach(function (prop) { return list = list[prop]; });\n            }\n            return list;\n        });\n    };\n    ;\n    Ng2AutoComplete = __decorate([\n        core_1.Injectable(),\n        __param(0, core_1.Optional()), \n        __metadata('design:paramtypes', [http_1.Http])\n    ], Ng2AutoComplete);\n    return Ng2AutoComplete;\n}());\nexports.Ng2AutoComplete = Ng2AutoComplete;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar core_1 = __webpack_require__(0);\nvar ng2_auto_complete_component_1 = __webpack_require__(1);\nvar forms_1 = __webpack_require__(4);\n/**\n * display auto-complete section with input and dropdown list when it is clicked\n */\nvar Ng2AutoCompleteDirective = (function () {\n    function Ng2AutoCompleteDirective(resolver, renderer, viewContainerRef, parentForm) {\n        var _this = this;\n        this.resolver = resolver;\n        this.renderer = renderer;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n        this.loadingText = \"Loading\";\n        this.tabToSelect = true;\n        this.matchFormatted = false;\n        this.ngModelChange = new core_1.EventEmitter();\n        this.valueChanged = new core_1.EventEmitter();\n        //show auto-complete list below the current element\n        this.showAutoCompleteDropdown = function (event) {\n            var factory = _this.resolver.resolveComponentFactory(ng2_auto_complete_component_1.Ng2AutoCompleteComponent);\n            _this.componentRef = _this.viewContainerRef.createComponent(factory);\n            var component = _this.componentRef.instance;\n            component.showInputTag = false; //Do NOT display autocomplete input tag separately\n            component.pathToData = _this.pathToData;\n            component.minChars = _this.minChars;\n            component.source = _this.source;\n            component.placeholder = _this.autoCompletePlaceholder;\n            component.acceptUserInput = _this.acceptUserInput;\n            component.maxNumList = parseInt(_this.maxNumList, 10);\n            component.loadingText = _this.loadingText;\n            component.listFormatter = _this.listFormatter;\n            component.blankOptionText = _this.blankOptionText;\n            component.noMatchFoundText = _this.noMatchFoundText;\n            component.tabToSelect = _this.tabToSelect;\n            component.matchFormatted = _this.matchFormatted;\n            component.valueSelected.subscribe(_this.selectNewValue);\n            _this.acDropdownEl = _this.componentRef.location.nativeElement;\n            _this.acDropdownEl.style.display = \"none\";\n            // if this element is not an input tag, move dropdown after input tag\n            // so that it displays correctly\n            if (_this.el.tagName !== \"INPUT\" && _this.acDropdownEl) {\n                _this.inputEl.parentElement.insertBefore(_this.acDropdownEl, _this.inputEl.nextSibling);\n            }\n            _this.revertValue = typeof _this.ngModel !== \"undefined\" ? _this.ngModel : _this.inputEl.value;\n            setTimeout(function () {\n                component.reloadList(_this.inputEl.value);\n                _this.styleAutoCompleteDropdown();\n                component.dropdownVisible = true;\n            });\n        };\n        this.hideAutoCompleteDropdown = function (event) {\n            if (_this.componentRef) {\n                var currentItem = void 0;\n                var hasRevertValue = (typeof _this.revertValue !== \"undefined\");\n                if (_this.inputEl && hasRevertValue && _this.acceptUserInput === false) {\n                    currentItem = _this.componentRef.instance.findItemFromSelectValue(_this.inputEl.value);\n                }\n                _this.componentRef.destroy();\n                _this.componentRef = undefined;\n                if (_this.inputEl &&\n                    hasRevertValue &&\n                    _this.acceptUserInput === false &&\n                    currentItem === null) {\n                    _this.selectNewValue(_this.revertValue);\n                }\n            }\n        };\n        this.styleAutoCompleteDropdown = function () {\n            if (_this.componentRef) {\n                var component = _this.componentRef.instance;\n                /* setting width/height auto complete */\n                var thisElBCR = _this.el.getBoundingClientRect();\n                var thisInputElBCR = _this.inputEl.getBoundingClientRect();\n                var closeToBottom = thisInputElBCR.bottom + 100 > window.innerHeight;\n                _this.acDropdownEl.style.width = thisInputElBCR.width + \"px\";\n                _this.acDropdownEl.style.position = \"absolute\";\n                _this.acDropdownEl.style.zIndex = \"1\";\n                _this.acDropdownEl.style.left = \"0\";\n                _this.acDropdownEl.style.display = \"inline-block\";\n                if (closeToBottom) {\n                    _this.acDropdownEl.style.bottom = thisInputElBCR.height + \"px\";\n                }\n                else {\n                    _this.acDropdownEl.style.top = thisInputElBCR.height + \"px\";\n                }\n            }\n        };\n        this.selectNewValue = function (item) {\n            // make displayable value\n            if (item && typeof item === \"object\") {\n                item = _this.setToStringFunction(item);\n            }\n            _this.inputEl && (_this.inputEl.value = '' + item);\n            // make return value\n            var val = item;\n            if (_this.selectValueOf && item[_this.selectValueOf]) {\n                val = item[_this.selectValueOf];\n            }\n            if ((_this.parentForm && _this.formControlName) || _this.extFormControl) {\n                if (!!val) {\n                    _this.formControl.patchValue(val);\n                }\n            }\n            (val !== _this.ngModel) && _this.ngModelChange.emit(val);\n            _this.valueChanged.emit(val);\n            _this.hideAutoCompleteDropdown();\n        };\n        this.keydownEventHandler = function (evt) {\n            if (_this.componentRef) {\n                var component = _this.componentRef.instance;\n                component.inputElKeyHandler(evt);\n            }\n        };\n        this.inputEventHandler = function (evt) {\n            if (_this.componentRef) {\n                var component = _this.componentRef.instance;\n                component.dropdownVisible = true;\n                component.reloadListInDelay(evt);\n            }\n            else {\n                _this.showAutoCompleteDropdown();\n            }\n        };\n        this.el = this.viewContainerRef.element.nativeElement;\n    }\n    Ng2AutoCompleteDirective.prototype.ngOnInit = function () {\n        // wrap this element with <div class=\"ng2-auto-complete\">\n        this.wrapperEl = document.createElement(\"div\");\n        this.wrapperEl.className = \"ng2-auto-complete-wrapper\";\n        this.wrapperEl.style.position = \"relative\";\n        this.el.parentElement.insertBefore(this.wrapperEl, this.el.nextSibling);\n        this.wrapperEl.appendChild(this.el);\n        //Check if we were supplied with a [formControlName] and it is inside a [form]\n        //else check if we are supplied with a [FormControl] regardless if it is inside a [form] tag\n        if (this.parentForm && this.formControlName) {\n            if (this.parentForm['form']) {\n                this.formControl = this.parentForm['form'].get(this.formControlName);\n            }\n            else if (this.parentForm instanceof forms_1.FormGroupName) {\n                this.formControl = this.parentForm.control.controls[this.formControlName];\n            }\n        }\n        else if (this.extFormControl) {\n            this.formControl = this.extFormControl;\n        }\n        // apply toString() method for the object\n        if (!!this.ngModel) {\n            this.selectNewValue(this.ngModel);\n        }\n        else if (!!this.formControl && this.formControl.value) {\n            this.selectNewValue(this.formControl.value[this.displayPropertyName]);\n        }\n    };\n    Ng2AutoCompleteDirective.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        // if this element is not an input tag, move dropdown after input tag\n        // so that it displays correctly\n        this.inputEl = this.el.tagName === \"INPUT\" ?\n            this.el : this.el.querySelector(\"input\");\n        this.inputEl.addEventListener('focus', function (e) { return _this.showAutoCompleteDropdown(e); });\n        this.inputEl.addEventListener('blur', function (e) { return _this.hideAutoCompleteDropdown(e); });\n        this.inputEl.addEventListener('keydown', function (e) { return _this.keydownEventHandler(e); });\n        this.inputEl.addEventListener('input', function (e) { return _this.inputEventHandler(e); });\n    };\n    Ng2AutoCompleteDirective.prototype.ngOnDestroy = function () {\n        if (this.componentRef) {\n            this.componentRef.instance.valueSelected.unsubscribe();\n        }\n    };\n    Ng2AutoCompleteDirective.prototype.ngOnChanges = function (changes) {\n        if (changes['ngModel']) {\n            this.ngModel = this.setToStringFunction(changes['ngModel'].currentValue);\n        }\n    };\n    Ng2AutoCompleteDirective.prototype.setToStringFunction = function (item) {\n        if (item && typeof item === \"object\") {\n            var displayVal_1;\n            if (typeof this.valueFormatter === 'string') {\n                var matches = this.valueFormatter.match(/[a-zA-Z0-9_\\$]+/g);\n                var formatted_1 = this.valueFormatter;\n                if (matches && typeof item !== 'string') {\n                    matches.forEach(function (key) {\n                        formatted_1 = formatted_1.replace(key, item[key]);\n                    });\n                }\n                displayVal_1 = formatted_1;\n            }\n            else if (typeof this.valueFormatter === 'function') {\n                displayVal_1 = this.valueFormatter(item);\n            }\n            else if (this.displayPropertyName) {\n                displayVal_1 = item[this.displayPropertyName];\n            }\n            else if (typeof this.listFormatter === 'string' && this.listFormatter.match(/^\\w+$/)) {\n                displayVal_1 = item[this.listFormatter];\n            }\n            else {\n                displayVal_1 = item.value;\n            }\n            item.toString = function () {\n                return displayVal_1;\n            };\n        }\n        return item;\n    };\n    __decorate([\n        core_1.Input(\"auto-complete-placeholder\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"autoCompletePlaceholder\", void 0);\n    __decorate([\n        core_1.Input(\"source\"), \n        __metadata('design:type', Object)\n    ], Ng2AutoCompleteDirective.prototype, \"source\", void 0);\n    __decorate([\n        core_1.Input(\"path-to-data\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"pathToData\", void 0);\n    __decorate([\n        core_1.Input(\"min-chars\"), \n        __metadata('design:type', Number)\n    ], Ng2AutoCompleteDirective.prototype, \"minChars\", void 0);\n    __decorate([\n        core_1.Input(\"display-property-name\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"displayPropertyName\", void 0);\n    __decorate([\n        core_1.Input(\"accept-user-input\"), \n        __metadata('design:type', Boolean)\n    ], Ng2AutoCompleteDirective.prototype, \"acceptUserInput\", void 0);\n    __decorate([\n        core_1.Input(\"max-num-list\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"maxNumList\", void 0);\n    __decorate([\n        core_1.Input(\"select-value-of\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"selectValueOf\", void 0);\n    __decorate([\n        core_1.Input(\"list-formatter\"), \n        __metadata('design:type', Object)\n    ], Ng2AutoCompleteDirective.prototype, \"listFormatter\", void 0);\n    __decorate([\n        core_1.Input(\"loading-text\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"loadingText\", void 0);\n    __decorate([\n        core_1.Input(\"blank-option-text\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"blankOptionText\", void 0);\n    __decorate([\n        core_1.Input(\"no-match-found-text\"), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"noMatchFoundText\", void 0);\n    __decorate([\n        core_1.Input(\"value-formatter\"), \n        __metadata('design:type', Object)\n    ], Ng2AutoCompleteDirective.prototype, \"valueFormatter\", void 0);\n    __decorate([\n        core_1.Input(\"tab-to-select\"), \n        __metadata('design:type', Boolean)\n    ], Ng2AutoCompleteDirective.prototype, \"tabToSelect\", void 0);\n    __decorate([\n        core_1.Input(\"match-formatted\"), \n        __metadata('design:type', Boolean)\n    ], Ng2AutoCompleteDirective.prototype, \"matchFormatted\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"ngModel\", void 0);\n    __decorate([\n        core_1.Input('formControlName'), \n        __metadata('design:type', String)\n    ], Ng2AutoCompleteDirective.prototype, \"formControlName\", void 0);\n    __decorate([\n        core_1.Input('formControl'), \n        __metadata('design:type', forms_1.FormControl)\n    ], Ng2AutoCompleteDirective.prototype, \"extFormControl\", void 0);\n    __decorate([\n        core_1.Output(), \n        __metadata('design:type', Object)\n    ], Ng2AutoCompleteDirective.prototype, \"ngModelChange\", void 0);\n    __decorate([\n        core_1.Output(), \n        __metadata('design:type', Object)\n    ], Ng2AutoCompleteDirective.prototype, \"valueChanged\", void 0);\n    Ng2AutoCompleteDirective = __decorate([\n        core_1.Directive({\n            selector: \"[auto-complete], [ng2-auto-complete]\"\n        }),\n        __param(3, core_1.Optional()),\n        __param(3, core_1.Host()),\n        __param(3, core_1.SkipSelf()), \n        __metadata('design:paramtypes', [core_1.ComponentFactoryResolver, core_1.Renderer, core_1.ViewContainerRef, forms_1.ControlContainer])\n    ], Ng2AutoCompleteDirective);\n    return Ng2AutoCompleteDirective;\n}());\nexports.Ng2AutoCompleteDirective = Ng2AutoCompleteDirective;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = __webpack_require__(0);\nvar common_1 = __webpack_require__(6);\nvar forms_1 = __webpack_require__(4);\nvar ng2_auto_complete_component_1 = __webpack_require__(1);\nvar ng2_auto_complete_directive_1 = __webpack_require__(3);\nvar ng2_auto_complete_1 = __webpack_require__(2);\nvar Ng2AutoCompleteModule = (function () {\n    function Ng2AutoCompleteModule() {\n    }\n    Ng2AutoCompleteModule.forRoot = function () {\n        return {\n            ngModule: Ng2AutoCompleteModule,\n            providers: [ng2_auto_complete_1.Ng2AutoComplete]\n        };\n    };\n    Ng2AutoCompleteModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule, forms_1.FormsModule],\n            declarations: [ng2_auto_complete_component_1.Ng2AutoCompleteComponent, ng2_auto_complete_directive_1.Ng2AutoCompleteDirective],\n            exports: [ng2_auto_complete_component_1.Ng2AutoCompleteComponent, ng2_auto_complete_directive_1.Ng2AutoCompleteDirective],\n            entryComponents: [ng2_auto_complete_component_1.Ng2AutoCompleteComponent]\n        }), \n        __metadata('design:paramtypes', [])\n    ], Ng2AutoCompleteModule);\n    return Ng2AutoCompleteModule;\n}());\nexports.Ng2AutoCompleteModule = Ng2AutoCompleteModule;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar ng2_auto_complete_1 = __webpack_require__(2);\nexports.Ng2AutoComplete = ng2_auto_complete_1.Ng2AutoComplete;\nvar ng2_auto_complete_module_1 = __webpack_require__(5);\nexports.Ng2AutoCompleteModule = ng2_auto_complete_module_1.Ng2AutoCompleteModule;\nvar ng2_auto_complete_component_1 = __webpack_require__(1);\nexports.Ng2AutoCompleteComponent = ng2_auto_complete_component_1.Ng2AutoCompleteComponent;\nvar ng2_auto_complete_directive_1 = __webpack_require__(3);\nexports.Ng2AutoCompleteDirective = ng2_auto_complete_directive_1.Ng2AutoCompleteDirective;\n\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=ng2-auto-complete.umd.js.map"}